---

# tasks file for firefox_config


- name: Find profile directory
  ansible.builtin.find:
    paths: "{{ firefox_config_path[ansible_distribution] }}"
    patterns: '*.{{ profile_name }}'
    file_type: directory
  register: profile_dir

- name: Parse result for existing profile path
  when: profile_dir.files
  set_fact:
    profile_path: "{{ profile_dir.files[0].path }}"

- name: Create new profile
  when: not profile_dir.files
  block:
    - name: Create firefox profile
      ansible.builtin.command: 
        cmd: "firefox -headless -CreateProfile {{ profile_name }}"
      register: result
      changed_when: result.rc == 0

    - name: Populate default profile
      ansible.builtin.command: firefox -headless -P default_profile_by_ansible
      async: 1
      poll: 1
      ignore_errors: true

    - name: Find profile directory
      ansible.builtin.find:
        paths: "{{ firefox_config_path[ansible_distribution] }}"
        patterns: '*.{{ profile_name }}'
        file_type: directory
      register: profile_dir

    - name: Parse result for profile path
      set_fact:
        profile_path: "{{ profile_dir.files[0].path }}"

- name: Template user.js to host
  ansible.builtin.template:
    src: "user.js.j2"
    dest: "{{ profile_path }}/user.js"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_effective_group_id }}"
    mode: "0644"

- name: Set general options in profiles.ini
  loop: "{{ profile_options | dict2items }}"
  community.general.ini_file:
    path: '{{ firefox_config_path[ansible_distribution] }}/profiles.ini'
    section: General
    option: '{{ item.key }}'
    value: '{{ item.value }}'
    mode: 0644
    create: yes
    no_extra_spaces: yes

- name: Set ansible profile name
  loop: "{{ profile_config | dict2items }}"
  community.general.ini_file:
    path: "{{ firefox_config_path[ansible_distribution] }}/profiles.ini"
    section: Profile0
    option: "{{ item.key }}"
    value:  "{{ item.value }}"
    mode: "0644"
    create: yes
    no_extra_spaces: yes

- name: Get extensions
  loop: "{{ extensions }}"
  loop_control:
    loop_var: extension
  ansible.builtin.include_tasks:
    file: extensions.yml

- name: Create directory if they don't exist
  become: true
  ansible.builtin.file:
    path: "/{{ policies_path }}"
    state: directory
    owner: root
    group: root
    mode: "0775"

- name: Template policies.json to host - enables extensions
  become: true
  ansible.builtin.copy:
    src: "policies.json.j2"
    dest: "/{{ policies_path }}/policies.json"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_effective_group_id }}"
    mode: "0644"

...